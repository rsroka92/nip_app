#pragma checksum "C:\Users\rsrok\source\repos\NIP\NIP\Views\Nip\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cf55efd49b2ae2885de964ffcf8e842861f5273b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Nip_Index), @"mvc.1.0.view", @"/Views/Nip/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cf55efd49b2ae2885de964ffcf8e842861f5273b", @"/Views/Nip/Index.cshtml")]
    public class Views_Nip_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cf55efd49b2ae2885de964ffcf8e842861f5273b2682", async() => {
                WriteLiteral(@"
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js""></script>
    <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"" integrity=""sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"" crossorigin=""anonymous"">
    <title>Nip_app</title>
    <style>
        button {
            border-collapse: collapse;
            width: 25%;
            color: #fff;
            font-family: Arial, sans-serif;
            font-size: 14px;
            background-color: #ff9800;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            margin: auto;
            margin-top: 50px;
            margin-bottom: 50px;
            border: 1px solid #fff;
            font-weight: bold;
            padding: 10px;
            letter-spacing: 1px;
        }

        table {
            border-collapse: collapse;
            width: 100%;
         ");
                WriteLiteral(@"   color: #333;
            font-family: Arial, sans-serif;
            font-size: 14px;
            text-align: left;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            margin: auto;
            margin-top: 50px;
            margin-bottom: 50px;
        }

            table th {
                background-color: #ff9800;
                color: #fff;
                font-weight: bold;
                padding: 10px;
                letter-spacing: 1px;
                border-top: 1px solid #fff;
                border-bottom: 1px solid #ccc;
            }

            table tr:nth-child(even) td {
                background-color: #f2f2f2;
            }

            table tr:hover td {
                background-color: #ffedcc;
            }

            table td {
                background-color: #fff;
                padding: 10px;
                border-bottom: 1px solid #ccc;
                font");
                WriteLiteral("-weight: bold;\r\n            }\r\n\r\n        .class-with25 {\r\n            width: 25%;\r\n        }\r\n\r\n        .class-with75 {\r\n            width: 75%;\r\n        }\r\n\r\n        .class-with100 {\r\n            width: 100%;\r\n        }\r\n    </style>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cf55efd49b2ae2885de964ffcf8e842861f5273b6040", async() => {
                WriteLiteral(@"
    <div class=""container"">
        <div class=""d-flex flex-column"">
            <div class=""p-1""><label>Podaj NIP</label></div>
            <div class=""p-1""><input type=""number"" id=""nip"" /></div>
            <div class=""p-1""><button id=""spr"">SPRAWDŹ</button></div>
            <label id=""warningInfo""></label>
        </div>
        <div id=""response"" class=""d-flex flex-column"">
        </div>
    </div>
    <script>
        $(document).on('keypress', '#nip', function (e) {
            if ($(e.target).prop('value').length >= 10) {
                if (e.keyCode != 32) { return false }
            }
        });

        $('#spr').click(function (e) {
            e.preventDefault();

            let response = document.getElementById('response');
            response.innerHTML = '';

            let nip = document.getElementById(""nip"").value;
            if (nip.length === 0) {
                displayWarningInfo({ message: ""Proszę podać NIP."" });
                return;
            }");
                WriteLiteral(@"

            let data = {
                nip: nip
            };

            $.ajax({
                type: ""POST"",
                url: ""/Nip/GetSubjectInfo"",
                content: ""application/json; charset=utf-8"",
                dataType: ""text"",
                data: data,
                success: function (d) {
                    let d1 = JSON.parse(d);
                    if (""message"" in d1) {
                        displayWarningInfo(d1);
                    }
                    else {
                        populateData(d1);
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    displayWarningInfo({ message: xhr });
                }
            });
        });
        let dictMainNames = {
            dictNames: {
                name: ""Nazwa"",
                nip: ""NIP"",
                statusVat: ""Status VAT"",
                regon: ""Regon"",
                pesel: ""Pesel"",
            ");
                WriteLiteral(@"    krs: ""KRS"",
                residenceAddress: ""Adres zamieszkania"",
                workingAddress: ""Adres pracy"",
                representatives: ""Przedstawiciele"",
                authorizedClerks: ""Upoważnieni urzędnicy"",
                partners: ""Partnerzy"",
                registrationLegalDate: ""Data zarejestrowania podmiotu"",
                registrationDenialBasis: ""Podstawa prawna odmowy zarejestrowania"",
                registrationDenialDate: ""Data odmowy zarejestrowania"",
                restorationBasis: ""Podstawa prawna odnowienia zarejestrowania"",
                restorationDate: ""Data odnowienia zarejestrowania"",
                removalBasis: ""Podstawa prawna usunięcia"",
                removalDate: ""Data usunięcia"",
                accountNumbers: ""Numery kont"",
                hasVirtualAccounts: ""Czy posiada wirtualne konta""
            },
            representatives: {
                companyName: ""Nazwa firmy"",
                firstName: ""Imię"",
                la");
                WriteLiteral(@"stName: ""Nazwisko"",
                nip: ""NIP"",
                pesel: ""Pesel""
            },
            partners: {
                companyName: ""Nazwa firmy"",
                firstName: ""Imię"",
                lastName: ""Nazwisko"",
                nip: ""NIP"",
                pesel: ""Pesel""
            },
            accountNumbers: {
                accountNumber: ""Numer konta""
            }
        }

        function displayWarningInfo(d) {
            let warningLabel = document.createElement(""label"");
            warningLabel.innerText = d.message;
            response.appendChild(warningLabel);
        }

        function populateData(d) {
            let dane = d.result.subject;
            let table = createTableFromJson(d.result.subject, '<th>NIP</th><th>' + dane.nip + '</th>');
            response.appendChild(table);
        }

        function createTableFromJson(json, thText) {
            let table = document.createElement('table');
            let trTh = document");
                WriteLiteral(@".createElement('tr');
            trTh.innerHTML = thText;
            table.appendChild(trTh);
            for (var key in json) {
                if (Array.isArray(json[key])) {
                    let tr = document.createElement('tr');
                    let td = document.createElement(""td"");
                    td.innerText = dictMainNames.dictNames[key];

                    tr.appendChild(td);

                    let tdSmallTable = document.createElement(""td"");
                    if (json[key].length > 0) {
                        let tr2 = document.createElement('tr');
                        let accNumber = false;
                        for (var arr in dictMainNames[key]) {
                            let th = document.createElement(""th"");
                            th.innerText = dictMainNames[key][arr];
                            if (dictMainNames[key][arr] === ""Numer konta"")
                                accNumber = true;
                            tr2.appendChild(th);");
                WriteLiteral(@"
                        }
                        tdSmallTable.appendChild(tr2);
                        for (var arr in json[key]) {
                            let tr1 = document.createElement('tr');
                            if (!accNumber) {
                                for (var val in json[key][arr]) {
                                    let td1 = document.createElement(""td"");
                                    if (json[key][arr][val] !== null)
                                        td1.innerText = json[key][arr][val];
                                    else
                                        td1.innerText = ""-"";
                                    tr1.appendChild(td1);
                                }
                            }
                            else {
                                let td1 = document.createElement(""td"");
                                td1.innerText = json[key][arr];
                                tr1.appendChild(td1);
                   ");
                WriteLiteral(@"         }
                            tdSmallTable.appendChild(tr1);
                        }
                    }
                    else
                        tdSmallTable.innerText = ""-"";
                    tr.appendChild(tdSmallTable);
                    table.appendChild(tr);
                }
                else {
                    let tr = document.createElement('tr');
                    let value = ""-"";
                    if (json[key] !== null)
                        value = json[key];
                    tr.innerHTML = '<td>' + dictMainNames.dictNames[key] + '</td><td>' + value + '</td>';
                    table.appendChild(tr);
                }
            }
            return table;
        }
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
